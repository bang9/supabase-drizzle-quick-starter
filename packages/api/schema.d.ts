/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get profile of current user
         * @description Get profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                "2XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description user profile */
                            profile: {
                                /** @description id of data */
                                id: string;
                                /** @description id of user */
                                userId: string;
                                /** @description email of user */
                                email: string;
                                /** @description auth provider */
                                provider: string;
                                /**
                                 * @description role of user
                                 * @enum {string}
                                 */
                                role: "user" | "admin";
                                /** @description nickname of user */
                                nickname: string;
                                /** @description avatar image url of user */
                                avatar: string;
                                /** @description age of user */
                                age: string;
                                /** @description Date and time the resource was created */
                                createdAt: string;
                                /** @description Date and time the resource was updated */
                                updatedAt: string | null;
                            };
                        };
                    };
                };
            };
        };
        /**
         * update profile of current user
         * @description Update profile
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        profile?: {
                            /** @description nickname of user */
                            nickname?: string;
                            /** @description avatar image url of user */
                            avatar?: string;
                            /** @description age of user */
                            age?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Successful response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Error response */
        ErrorResponse: {
            error: {
                /** @description error code */
                code: string;
                /** @description error message */
                message: string;
                /** @description errors, it could be any type of error like validations */
                errors?: Record<string, never>[];
            };
        };
        Headers: {
            /** @description The UTC offset of the client */
            "X-UTC-Offset"?: number;
            /** @description The language of the client */
            "Accept-Language"?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
