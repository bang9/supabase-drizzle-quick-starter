name: Upload image to ECR (prod)

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPO: starter-server
  CI: 1
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  PROJECT_ID: ${{ secrets.SUPABASE_PRJ_ID }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      database: ${{ steps.filter.outputs.database }}
      server: ${{ steps.filter.outputs.server }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            database:
              - 'supabase/migrations/**'
              - 'drizzle.config.ts'
            server:
              - 'apps/server/**'

  db-migrate:
    name: DB migration
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.database == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase db push --db-url ${{ secrets.DB_URL }}
        continue-on-error: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env.prod file
        run: |
          echo SUPABASE_URL=${{ secrets.SUPABASE_URL }} >> .env.prod
          echo SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} >> .env.prod
          echo SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }} >> .env.prod
          echo DATABASE_URL=${{ secrets.DB_URL }} >> .env.prod
          echo NODE_ENV=prod >> .env.prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
